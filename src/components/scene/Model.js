/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useCallback } from 'react';
import { useGLTF, useTexture, shaderMaterial } from '@react-three/drei';
import model from './beresford_design.glb';
import useStore from './store';
import { gsap, Power1 } from 'gsap';
import { extend, useFrame } from '@react-three/fiber';
import { Color, sRGBEncoding } from 'three';
import emissiveVertexShader from '../../shaders/emissiveCube/emissiveCube.vert';
import emissiveFragmentShader from '../../shaders/emissiveCube/emissiveCube.frag';
import bake2 from '../../images/bakes/bake2.jpg';
import bake3 from '../../images/bakes/bake3.jpg';
import bake4 from '../../images/bakes/bake4.jpg';
import bake5 from '../../images/bakes/bake5.jpg';
import bake6 from '../../images/bakes/bake6.jpg';
import bake7 from '../../images/bakes/bake7.jpg';
import bake8 from '../../images/bakes/bake8.jpg';
import { useMediaQuery } from 'react-responsive';

const EmissiveCubeMaterial = shaderMaterial(
  {
    uTime: 0,
    uColor: new Color(1.0, 0.0, 0.0),
    uScale: 1,
    uHovered: 0,
  },
  emissiveVertexShader,
  emissiveFragmentShader
);

extend({ EmissiveCubeMaterial });

export default function Model({ videos, ...props }) {
  // REF's
  const group = useRef();
  const monitor = useRef();
  const emailRef = useRef();
  const instagramRef = useRef();
  const linkedInRef = useRef();
  const githubRef = useRef();

  const setLoaded = useStore((state) => state.setLoaded);
  const setView = useStore((state) => state.setView);
  const view = useStore((state) => state.view);
  const experienceStarted = useStore((state) => state.experienceStarted);

  const isMobile = useMediaQuery({ maxWidth: '1200px' });

  // LOAD TEXTURES AND CONFIG MATERIALS
  const bakedTex2 = useTexture(bake2);
  const bakedTex3 = useTexture(bake3);
  const bakedTex4 = useTexture(bake4);
  const bakedTex5 = useTexture(bake5);
  const bakedTex6 = useTexture(bake6);
  const bakedTex7 = useTexture(bake7);
  const bakedTex8 = useTexture(bake8);

  bakedTex2.flipY = false;
  bakedTex3.flipY = false;
  bakedTex4.flipY = false;
  bakedTex5.flipY = false;
  bakedTex6.flipY = false;
  bakedTex7.flipY = false;
  bakedTex8.flipY = false;

  const emissionColors = {
    email: { r: 255, g: 255, b: 225 },
    instagram: { r: 245, g: 229, b: 255 },
    linkedIn: { r: 204, g: 232, b: 255 },
    github: { r: 255, g: 204, b: 204 },
    orangeLamp: '#ffa42c',
    purpleLamp: '#d187ff',
    pinkLamp: '#ff56d8',
    screens: '#f1f6f9',
    shelving: '#f8c888',
  };

  // pointer event handlers
  const case1Clicked = (e) => {
    if (view === 'case1') {
      return;
    } else {
      setView('case1');
    }
  };

  const case2Clicked = (e) => {
    if (view === 'case2') {
      return;
    } else {
      setView('case2');
    }
  };

  const case3Clicked = (e) => {
    if (view === 'case3') {
      return;
    } else {
      setView('case3');
    }
  };

  const emailClicked = (e) => {
    if (view === 'socials' || isMobile) {
      window.open(
        'mailto:consult@beresforddesign.net?subject=Inquiry From Portfolio'
      );
    } else {
      setView('socials');
    }
  };

  const instaClicked = (e) => {
    if (view === 'socials' || isMobile) {
      window.open('http://instagram.com/beresforddesign/');
    } else {
      setView('socials');
    }
  };

  const linkedinClicked = (e) => {
    if (view === 'socials' || isMobile) {
      window.open('http://linkedin.com/in/JMBeresford');
    } else {
      setView('socials');
    }
  };

  const githubClicked = (e) => {
    if (view === 'socials' || isMobile) {
      window.open('http://github.com/JMBeresford');
    } else {
      setView('socials');
    }
  };

  const handlePointerEnter = (e) => {
    if (isMobile) return;

    const mesh = e.object;
    const tooltip = document.querySelector('.tooltipContent');
    const cursor = document.querySelector('.cursor');

    if (view !== 'socials' && mesh.userData.cube) {
      cursor.classList.add('socials');
      cursor.classList.add('hovering');
      tooltip.textContent = 'Social Media';
    } else {
      cursor.classList.add(mesh.userData.name);
      cursor.classList.add('hovering');
      tooltip.textContent = mesh.userData.tooltip;
    }

    if (view === 'socials' && mesh.userData.cube && !mesh.userData.animating) {
      gsap.to(mesh.material.uniforms.uScale, {
        duration: 0.2,
        ease: Power1.easeInOut,
        value: 1.1,
        onStart: () => {
          mesh.userData.animating = true;
        },
        onComplete: () => {
          mesh.userData.animating = false;
        },
      });
    }
  };

  const handlePointerOut = (e) => {
    if (isMobile) return;

    const mesh = e.object;
    const cursor = document.querySelector('.cursor');

    if (view !== 'socials' && mesh.userData.cube) {
      cursor.classList.remove('socials');
      cursor.classList.remove('hovering');
    } else {
      cursor.classList.remove(mesh.userData.name);
      cursor.classList.remove('hovering');
    }

    if (view === 'socials' && mesh.userData.cube) {
      gsap.to(mesh.material.uniforms.uScale, {
        duration: 0.2,
        ease: Power1.easeInOut,
        value: 1,
        onStart: () => {
          mesh.userData.animating = true;
        },
        onComplete: () => {
          mesh.userData.animating = false;
        },
      });
    }
  };

  // EFFECTS
  useEffect(() => {
    setLoaded();
  }, []);

  useEffect(() => {
    if (!isMobile && experienceStarted) {
      gsap.to(monitor.current.material, {
        duration: 1.5,
        opacity: 1,
        ease: Power1.easeOut,
        delay: 3,
      });
    }
  }, [isMobile, experienceStarted]);

  useFrame(({ clock }) => {
    emailRef.current.material.uniforms.uTime.value = clock.elapsedTime;
    instagramRef.current.material.uniforms.uTime.value =
      clock.elapsedTime + 0.25;
    linkedInRef.current.material.uniforms.uTime.value = clock.elapsedTime + 0.5;
    githubRef.current.material.uniforms.uTime.value = clock.elapsedTime + 0.75;
  });

  // LOAD GLTF
  const { nodes } = useGLTF(model);

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.mac_pro_emissive.geometry}
        position={[0.86955, 0.30488, -0.54437]}
      >
        <meshBasicMaterial color={emissionColors.screens} transparent />
      </mesh>
      <mesh
        geometry={nodes.phone_emissive.geometry}
        position={[0.01893, 0.78195, -0.80597]}
      >
        <meshBasicMaterial color={emissionColors.screens} />
      </mesh>
      <mesh
        geometry={nodes.monitor_emissive.geometry}
        position={[0.34019, 1.12988, -0.91913]}
        ref={monitor}
      >
        <meshBasicMaterial opacity={0}>
          {isMobile ? null : (
            <videoTexture
              attach='map'
              args={[videos.idleScreen]}
              flipY={false}
              encoding={sRGBEncoding}
              center={[0.5, 0.5]}
              repeat={[0.9, 1.6]}
            />
          )}
        </meshBasicMaterial>
      </mesh>
      <mesh
        geometry={nodes.ipad_emissive001.geometry}
        position={[-1.33327, 1.38233, -0.77324]}
        onPointerEnter={(e) => handlePointerEnter(e)}
        onPointerOut={(e) => handlePointerOut(e)}
        onClick={case1Clicked}
        userData={{ name: 'case1', tooltip: 'Case Study: Beresford Design' }}
      >
        <meshBasicMaterial>
          <videoTexture
            attach='map'
            args={[videos.bdPreview]}
            flipY={false}
            encoding={sRGBEncoding}
            center={[0.5, 0.5]}
            repeat={[0.8, 1.4]}
          />
        </meshBasicMaterial>
      </mesh>
      <mesh
        geometry={nodes.ipad_emissive002.geometry}
        position={[-0.90973, 0.98622, -0.77324]}
        onPointerEnter={(e) => handlePointerEnter(e)}
        onPointerOut={(e) => handlePointerOut(e)}
        onClick={case2Clicked}
        userData={{ name: 'case2', tooltip: 'Case Study: TBA' }}
      >
        <meshBasicMaterial>
          <videoTexture
            attach='map'
            args={[videos.idleScreen]}
            flipY={false}
            encoding={sRGBEncoding}
            center={[0.5, 0.5]}
            repeat={[0.7, 1.3]}
          />
        </meshBasicMaterial>
      </mesh>
      <mesh
        geometry={nodes.ipad_emissive.geometry}
        position={[-1.33327, 0.6179, -0.77324]}
        onPointerEnter={(e) => handlePointerEnter(e)}
        onPointerOut={(e) => handlePointerOut(e)}
        onClick={case3Clicked}
        userData={{ name: 'case3', tooltip: 'Case Study: TBA' }}
      >
        <meshBasicMaterial>
          <videoTexture
            attach='map'
            args={[videos.idleScreen]}
            flipY={false}
            encoding={sRGBEncoding}
            center={[0.5, 0.5]}
            repeat={[0.7, 1.3]}
          />
        </meshBasicMaterial>
      </mesh>
      <mesh
        geometry={nodes.email_emissive.geometry}
        position={[-1.54201, 1.74999, -0.82321]}
        onPointerEnter={(e) => handlePointerEnter(e)}
        onPointerOut={(e) => handlePointerOut(e)}
        onClick={emailClicked}
        userData={{
          name: 'email',
          cube: true,
          tooltip: 'Email consult@beresforddesign.net',
        }}
        ref={emailRef}
      >
        <emissiveCubeMaterial
          uColor={'rgb(255, 255, 215)'}
          uScale={1}
          uHovered={0}
        />
      </mesh>
      <mesh
        geometry={nodes.insta_emissive.geometry}
        position={[-1.2595, 1.74999, -0.82434]}
        onPointerEnter={(e) => handlePointerEnter(e)}
        onPointerOut={(e) => handlePointerOut(e)}
        onClick={instaClicked}
        userData={{ name: 'instagram', cube: true, tooltip: 'Instagram' }}
        ref={instagramRef}
      >
        <emissiveCubeMaterial
          uColor={'rgb(245, 229, 255)'}
          uScale={1}
          uHovered={0}
        />
      </mesh>
      <mesh
        geometry={nodes.linkedin_emissive.geometry}
        position={[-0.9821, 1.74999, -0.82434]}
        onPointerEnter={(e) => handlePointerEnter(e)}
        onPointerOut={(e) => handlePointerOut(e)}
        onClick={linkedinClicked}
        userData={{ name: 'linkedIn', cube: true, tooltip: 'LinkedIn' }}
        ref={linkedInRef}
      >
        <emissiveCubeMaterial
          uColor={'rgb(204, 232, 255)'}
          uScale={1}
          uHovered={0}
        />
      </mesh>
      <mesh
        geometry={nodes.table_emissive.geometry}
        position={[1.19391, 0.46596, -0.72178]}
      >
        <meshBasicMaterial color={'white'} />
      </mesh>
      <mesh
        geometry={nodes.shelving_emissive.geometry}
        position={[-1.1789, 0.51015, -0.87188]}
      >
        <meshBasicMaterial color={emissionColors.shelving} />
      </mesh>
      <mesh
        geometry={nodes.lamp_emissive_orange.geometry}
        position={[1.62294, 1.49388, -0.73567]}
      >
        <meshBasicMaterial color={emissionColors.orangeLamp} />
      </mesh>
      <mesh
        geometry={nodes.lamp_emissive_purple.geometry}
        position={[1.62294, 1.49388, -0.73567]}
      >
        <meshBasicMaterial color={emissionColors.purpleLamp} />
      </mesh>
      <mesh
        geometry={nodes.lamp_emissive_pink.geometry}
        position={[1.62294, 1.49388, -0.73567]}
      >
        <meshBasicMaterial color={emissionColors.pinkLamp} />
      </mesh>
      <mesh
        geometry={nodes.github_emissive.geometry}
        position={[-0.70014, 1.74999, -0.82434]}
        onPointerEnter={(e) => handlePointerEnter(e)}
        onPointerOut={(e) => handlePointerOut(e)}
        onClick={githubClicked}
        userData={{ name: 'github', cube: true, tooltip: 'GitHub' }}
        ref={githubRef}
      >
        <emissiveCubeMaterial
          uColor={'rgb(255, 204, 204)'}
          uScale={1}
          uHovered={0}
        />
      </mesh>
      <mesh
        geometry={nodes.bake2.geometry}
        position={[0.99771, 0.87454, -1.053]}
      >
        <meshBasicMaterial map={bakedTex2} transparent />
      </mesh>
      <mesh
        geometry={nodes.bake3.geometry}
        position={[0.86468, 0.35838, -0.66076]}
      >
        <meshBasicMaterial map={bakedTex3} transparent />
      </mesh>
      <mesh
        geometry={nodes.bake4.geometry}
        position={[0.01111, 1.01411, -1.13694]}
      >
        <meshBasicMaterial map={bakedTex4} transparent />
      </mesh>
      <mesh
        geometry={nodes.bake5.geometry}
        position={[-0.79024, -0.91263, -0.7532]}
      >
        <meshBasicMaterial map={bakedTex5} transparent />
      </mesh>
      <mesh
        geometry={nodes.bake6.geometry}
        position={[0.48428, 1.41479, 2.21467]}
        rotation={[-Math.PI / 2, 0, 0]}
      >
        <meshBasicMaterial map={bakedTex6} transparent />
      </mesh>
      <mesh
        geometry={nodes.bake7.geometry}
        position={[0.48428, 1.41479, 2.21467]}
        rotation={[-Math.PI / 2, 0, 0]}
      >
        <meshBasicMaterial map={bakedTex7} transparent />
      </mesh>
      <mesh
        geometry={nodes.bake8.geometry}
        position={[0.48428, 1.41479, 2.21467]}
        rotation={[-Math.PI / 2, 0, 0]}
      >
        <meshBasicMaterial map={bakedTex8} transparent />
      </mesh>
    </group>
  );
}

useGLTF.preload('beresford_design.glb');
