/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import model from './beresford_design.glb';
import { Pane } from 'tweakpane';
import { gsap, Power3 } from 'gsap';

export default function Model({ data, isLoaded, interacted, ...props }) {
  // DEBUG
  const pane = new Pane();

  const debug = {
    camLock: false,
  };

  const f = pane.addFolder({
    title: 'Debug',
    expanded: false,
  });

  // REF's
  const group = useRef();
  const myCamera = useThree((state) => {
    return state.camera;
  });

  const emissionRefs = {
    email: useRef(),
    instagram: useRef(),
    linkedIn: useRef(),
    github: useRef(),
    orangeLamp: useRef(),
    purpleLamp: useRef(),
    pinkLamp: useRef(),
  };

  // STATE
  const [view, setView] = useState('landing');
  const [target, setTarget] = useState({ x: 0.34019, y: 1.12988, z: -0.91913 });
  const [position, setPosition] = useState({
    x: 0.34019,
    y: 1.12988,
    z: -0.72,
  });
  const [moving, setMoving] = useState(false);

  // LOAD TEXTURES AND CONFIG MATERIALS
  const bakedTex2 = useTexture(data.bake2.childImageSharp.fixed.src);
  const bakedTex3 = useTexture(data.bake3.childImageSharp.fixed.src);
  const bakedTex4 = useTexture(data.bake4.childImageSharp.fixed.src);
  const bakedTex5 = useTexture(data.bake5.childImageSharp.fixed.src);
  const bakedTex6 = useTexture(data.bake6.childImageSharp.fixed.src);
  const bakedTex7 = useTexture(data.bake7.childImageSharp.fixed.src);
  const bakedTex8 = useTexture(data.bake8.childImageSharp.fixed.src);

  bakedTex2.flipY = false;
  bakedTex3.flipY = false;
  bakedTex4.flipY = false;
  bakedTex5.flipY = false;
  bakedTex6.flipY = false;
  bakedTex7.flipY = false;
  bakedTex8.flipY = false;

  const emissionColors = {
    email: '#fffdbd',
    instagram: '#e0afff',
    linkedIn: '#a4d6ff',
    github: '#ff8a8a',
    orangeLamp: '#ffa42c',
    purpleLamp: '#d187ff',
    pinkLamp: '#ff56d8',
    screens: '#f1f6f9',
    shelving: '#f8c888',
  };

  const emissionsF = f.addFolder({
    title: 'Emission Surface Colors',
    extended: false,
  });

  // add emission colors to debug panel with callback to uopdate material on change
  for (const property in emissionColors) {
    emissionsF.addInput(emissionColors, property).on('change', (e) => {
      emissionRefs[property].current.material.color.set(e.value);
    });
  }

  // CAMERA VIEWS
  const views = {
    moving: {
      position: { x: null, y: null, z: null },
      target: { x: null, y: null, z: null },
    },
    landing: {
      position: { x: 0.34019, y: 1.12988, z: -0.72 },
      target: { x: 0.34019, y: 1.12988, z: -0.91913 },
    },
    main: {
      position: { x: 0, y: 1.2, z: 1.2 },
      target: { x: 0, y: 0.69, z: -0.92 },
    },
    case1: {
      position: { x: -1.1, y: 1.54, z: -0.22 },
      target: { x: -1.1, y: 1.36, z: -0.92 },
    },
    case2: {
      position: { x: -1.1, y: 1.18, z: -0.22 },
      target: { x: -1.1, y: 1.0, z: -0.92 },
    },
    case3: {
      position: { x: -1.1, y: 0.82, z: -0.22 },
      target: { x: -1.1, y: 0.64, z: -0.92 },
    },
    socials: {
      position: { x: -1.03, y: 1.87, z: -0.22 },
      target: { x: -1.1, y: 1.63, z: -0.92 },
    },
  };

  // DEBUG!! POSITION CAMERA
  function setCamPos(x, y, z) {
    myCamera.position.x = x;
    myCamera.position.y = y;
    myCamera.position.z = z;

    myCamera.lookAt(
      camParams.camTarget.x,
      camParams.camTarget.y,
      camParams.camTarget.z
    );
  }

  function setCamTarget(x, y, z) {
    myCamera.lookAt(x, y, z);
  }

  const camParams = {
    camTarget: {
      x: 0.34019,
      y: 1.12988,
      z: -0.91913,
    },
    camPos: { x: 0.34019, y: 1.2, z: -0.72 },
  };

  const cameraF = f.addFolder({
    title: 'camera',
    expanded: false,
  });

  cameraF
    .addInput(camParams, 'camPos', {
      x: { step: 0.01 },
      y: { step: 0.01 },
      z: { step: 0.01 },
    })
    .on('change', (e) => {
      camParams.camPos = e.value;
      setCamPos(e.value.x, e.value.y, e.value.z);
    });

  cameraF
    .addInput(camParams, 'camTarget', {
      x: { step: 0.01 },
      y: { step: 0.01 },
      z: { step: 0.01 },
    })
    .on('change', (e) => {
      camParams.camTarget = e.value;
      setCamTarget(e.value.x, e.value.y, e.value.z);
    });

  // HELPERS
  const changeView = (newView) => {
    let newPosition = views[newView].position;
    let newTarget = views[newView].target;

    let tempTarget = target;
    let tempPosition = position;

    gsap.to(tempTarget, {
      duration: 3,
      x: newTarget.x,
      y: newTarget.y,
      z: newTarget.z,
      ease: Power3.easeInOut,
      onUpdate: () => {
        setTarget(tempTarget);
      },
    });

    gsap.to(tempPosition, {
      onStart: () => {
        setMoving(true);
      },
      onComplete: () => {
        setMoving(false);
        setView(newView);
      },
      duration: 3,
      x: newPosition.x,
      y: newPosition.y,
      z: newPosition.z,
      onUpdate: () => {
        setPosition(tempPosition);
      },
      ease: Power3.easeInOut,
    });
  };

  // EFFECTS
  useEffect(() => {
    isLoaded(true);
  }, [isLoaded]);

  useEffect(() => {
    if (interacted && view === 'landing') {
      changeView('main');
    }
    console.log('ass');
  }, [interacted, changeView]);

  useFrame(({ mouse }) => {
    if (view !== 'landing' && !moving && !debug.camLock) {
      let x = target.x + 0.1 * mouse.x;
      let y = target.y + 0.1 * mouse.y;

      myCamera.lookAt(x, y, target.z);
      myCamera.position.x = position.x - mouse.x * 0.05;
      myCamera.position.y = position.y - mouse.y * 0.05;
    } else {
      myCamera.lookAt(target.x, target.y, target.z);
      myCamera.position.set(position.x, position.y, position.z);
    }
  });

  // LOAD GLTF
  const { nodes } = useGLTF(model);

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.mac_pro_emissive.geometry}
        position={[0.86955, 0.30488, -0.54437]}
      >
        <meshBasicMaterial color={emissionColors.screens} />
      </mesh>
      <mesh
        geometry={nodes.phone_emissive.geometry}
        position={[0.01893, 0.78195, -0.80597]}
      >
        <meshBasicMaterial color={emissionColors.screens} />
      </mesh>
      <mesh
        geometry={nodes.monitor_emissive.geometry}
        position={[0.34019, 1.12988, -0.91913]}
      >
        <meshBasicMaterial color={emissionColors.screens} />
      </mesh>
      <mesh
        geometry={nodes.ipad_emissive001.geometry}
        position={[-1.33327, 1.38233, -0.77324]}
      >
        <meshBasicMaterial color={emissionColors.screens} />
      </mesh>
      <mesh
        geometry={nodes.ipad_emissive002.geometry}
        position={[-0.90973, 0.98622, -0.77324]}
      >
        <meshBasicMaterial color={emissionColors.screens} />
      </mesh>
      <mesh
        geometry={nodes.ipad_emissive.geometry}
        position={[-1.33327, 0.6179, -0.77324]}
      >
        <meshBasicMaterial color={emissionColors.screens} />
      </mesh>
      <mesh
        ref={emissionRefs.email}
        geometry={nodes.email_emissive.geometry}
        position={[-1.43596, 1.74085, -0.82356]}
      >
        <meshBasicMaterial color={emissionColors.email} />
      </mesh>
      <mesh
        ref={emissionRefs.instagram}
        geometry={nodes.insta_emissive.geometry}
        position={[-1.43596, 1.74085, -0.82356]}
      >
        <meshBasicMaterial color={emissionColors.instagram} />
      </mesh>
      <mesh
        ref={emissionRefs.linkedIn}
        geometry={nodes.linkedin_emissive.geometry}
        position={[-1.43596, 1.74085, -0.82356]}
      >
        <meshBasicMaterial color={emissionColors.linkedIn} />
      </mesh>
      <mesh
        geometry={nodes.table_emissive.geometry}
        position={[1.19391, 0.46596, -0.72178]}
      >
        <meshBasicMaterial color={'white'} />
      </mesh>
      <mesh
        geometry={nodes.shelving_emissive.geometry}
        position={[-1.1789, 0.51015, -0.87188]}
      >
        <meshBasicMaterial color={emissionColors.shelving} />
      </mesh>
      <mesh
        ref={emissionRefs.orangeLamp}
        geometry={nodes.lamp_emissive_orange.geometry}
        position={[1.62294, 1.49388, -0.73567]}
      >
        <meshBasicMaterial color={emissionColors.orangeLamp} />
      </mesh>
      <mesh
        ref={emissionRefs.purpleLamp}
        geometry={nodes.lamp_emissive_purple.geometry}
        position={[1.62294, 1.49388, -0.73567]}
      >
        <meshBasicMaterial color={emissionColors.purpleLamp} />
      </mesh>
      <mesh
        ref={emissionRefs.pinkLamp}
        geometry={nodes.lamp_emissive_pink.geometry}
        position={[1.62294, 1.49388, -0.73567]}
      >
        <meshBasicMaterial color={emissionColors.pinkLamp} />
      </mesh>
      <mesh
        ref={emissionRefs.github}
        geometry={nodes.github_emissive.geometry}
        position={[-1.43596, 1.74085, -0.82356]}
      >
        <meshBasicMaterial color={emissionColors.github} />
      </mesh>
      <mesh
        geometry={nodes.bake2.geometry}
        position={[0.99771, 0.87454, -1.053]}
      >
        <meshBasicMaterial map={bakedTex2} />
      </mesh>
      <mesh
        geometry={nodes.bake3.geometry}
        position={[0.86468, 0.35838, -0.66076]}
      >
        <meshBasicMaterial map={bakedTex3} />
      </mesh>
      <mesh
        geometry={nodes.bake4.geometry}
        position={[1.19391, 0.46596, -0.72178]}
      >
        <meshBasicMaterial map={bakedTex4} />
      </mesh>
      <mesh
        geometry={nodes.bake5.geometry}
        position={[-0.79024, -0.91263, -0.7532]}
      >
        <meshBasicMaterial map={bakedTex5} />
      </mesh>
      <mesh
        geometry={nodes.bake6.geometry}
        position={[-1.1789, 0.51015, -0.87188]}
      >
        <meshBasicMaterial map={bakedTex6} />
      </mesh>
      <mesh
        geometry={nodes.bake7.geometry}
        position={[1.62294, 1.49388, -0.73567]}
      >
        <meshBasicMaterial map={bakedTex7} />
      </mesh>
      <mesh
        geometry={nodes.bake8.geometry}
        position={[-0.00624, 0.83668, 0.20061]}
      >
        <meshBasicMaterial map={bakedTex8} />
      </mesh>

      {/* <OrbitControls camera={myCamera} ref={controls} /> */}
    </group>
  );
}

useGLTF.preload('/beresford_design.glb');
